
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000074  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000045  00000000  00000000  000000e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000103  00000000  00000000  0000012d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c9  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000f8  00000000  00000000  000002f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000009c  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000030  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	0b d0       	rcall	.+22     	; 0x4a <main>
  34:	1d c0       	rjmp	.+58     	; 0x70 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <SPI_MasterInit>:


void SPI_MasterInit(void)
{
/* Set MOSI and SCK output, all others input */
DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)| (1<<PB2) ;
  38:	8c e2       	ldi	r24, 0x2C	; 44
  3a:	87 bb       	out	0x17, r24	; 23
/* Enable SPI, Master, set clock rate fck/16 */
SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  3c:	81 e5       	ldi	r24, 0x51	; 81
  3e:	8d b9       	out	0x0d, r24	; 13
}
  40:	08 95       	ret

00000042 <SPI_MasterTransmit>:


void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
  42:	8f b9       	out	0x0f, r24	; 15
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF)))
  44:	77 9b       	sbis	0x0e, 7	; 14
  46:	fe cf       	rjmp	.-4      	; 0x44 <SPI_MasterTransmit+0x2>
;
}
  48:	08 95       	ret

0000004a <main>:


void SPI_MasterInit(void)
{
/* Set MOSI and SCK output, all others input */
DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)| (1<<PB2) ;
  4a:	8c e2       	ldi	r24, 0x2C	; 44
  4c:	87 bb       	out	0x17, r24	; 23
/* Enable SPI, Master, set clock rate fck/16 */
SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  4e:	81 e5       	ldi	r24, 0x51	; 81
  50:	8d b9       	out	0x0d, r24	; 13

int main(void)
{

SPI_MasterInit();	
DDRC=0XFF;
  52:	8f ef       	ldi	r24, 0xFF	; 255
  54:	84 bb       	out	0x14, r24	; 20


void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
  56:	91 e6       	ldi	r25, 0x61	; 97
{

SPI_MasterInit();	
DDRC=0XFF;
while(1==1){
PORTC &= ~(1<<PC0);
  58:	82 e6       	ldi	r24, 0x62	; 98
  5a:	a8 98       	cbi	0x15, 0	; 21


void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
  5c:	9f b9       	out	0x0f, r25	; 15
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF)))
  5e:	77 9b       	sbis	0x0e, 7	; 14
  60:	fe cf       	rjmp	.-4      	; 0x5e <main+0x14>
SPI_MasterInit();	
DDRC=0XFF;
while(1==1){
PORTC &= ~(1<<PC0);
SPI_MasterTransmit('a');
PORTC |= (1<<PC0);
  62:	a8 9a       	sbi	0x15, 0	; 21

PORTC &= ~(1<<PC0);
  64:	a8 98       	cbi	0x15, 0	; 21


void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
  66:	8f b9       	out	0x0f, r24	; 15
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF)))
  68:	77 9b       	sbis	0x0e, 7	; 14
  6a:	fe cf       	rjmp	.-4      	; 0x68 <main+0x1e>
SPI_MasterTransmit('a');
PORTC |= (1<<PC0);

PORTC &= ~(1<<PC0);
SPI_MasterTransmit('b');
PORTC |= (1<<PC0);
  6c:	a8 9a       	sbi	0x15, 0	; 21
  6e:	f5 cf       	rjmp	.-22     	; 0x5a <main+0x10>

00000070 <_exit>:
  70:	f8 94       	cli

00000072 <__stop_program>:
  72:	ff cf       	rjmp	.-2      	; 0x72 <__stop_program>
