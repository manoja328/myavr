
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000060  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000042  00000000  00000000  000000d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000e1  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000090  00000000  00000000  000001f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000bc  00000000  00000000  00000287  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000092  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	0b d0       	rcall	.+22     	; 0x4a <main>
  34:	13 c0       	rjmp	.+38     	; 0x5c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <SPI_SlaveInit>:
#define DD_SCK	 PB5
#define DD_SS	 PB2
void SPI_SlaveInit(void)
{
/* Set MISO output, all others input */
DDR_SPI = (1<<DD_MISO);
  38:	80 e1       	ldi	r24, 0x10	; 16
  3a:	87 bb       	out	0x17, r24	; 23
/* Enable SPI */
SPCR = (1<<SPE);
  3c:	80 e4       	ldi	r24, 0x40	; 64
  3e:	8d b9       	out	0x0d, r24	; 13
}
  40:	08 95       	ret

00000042 <SPI_SlaveReceive>:


char SPI_SlaveReceive(void)
{
/* Wait for reception complete */
while(!(SPSR & (1<<SPIF)));
  42:	77 9b       	sbis	0x0e, 7	; 14
  44:	fe cf       	rjmp	.-4      	; 0x42 <SPI_SlaveReceive>
/* Return data register */
return SPDR;
  46:	8f b1       	in	r24, 0x0f	; 15

}
  48:	08 95       	ret

0000004a <main>:
#define DD_SCK	 PB5
#define DD_SS	 PB2
void SPI_SlaveInit(void)
{
/* Set MISO output, all others input */
DDR_SPI = (1<<DD_MISO);
  4a:	80 e1       	ldi	r24, 0x10	; 16
  4c:	87 bb       	out	0x17, r24	; 23
/* Enable SPI */
SPCR = (1<<SPE);
  4e:	80 e4       	ldi	r24, 0x40	; 64
  50:	8d b9       	out	0x0d, r24	; 13
int main(void)
{

SPI_SlaveInit();
char rec;	
DDRB &=~(1<<DD_SS);
  52:	ba 98       	cbi	0x17, 2	; 23


char SPI_SlaveReceive(void)
{
/* Wait for reception complete */
while(!(SPSR & (1<<SPIF)));
  54:	77 9b       	sbis	0x0e, 7	; 14
  56:	fe cf       	rjmp	.-4      	; 0x54 <main+0xa>
/* Return data register */
return SPDR;
  58:	8f b1       	in	r24, 0x0f	; 15
  5a:	fc cf       	rjmp	.-8      	; 0x54 <main+0xa>

0000005c <_exit>:
  5c:	f8 94       	cli

0000005e <__stop_program>:
  5e:	ff cf       	rjmp	.-2      	; 0x5e <__stop_program>
